"use strict";(self.webpackChunkwecasino_www=self.webpackChunkwecasino_www||[]).push([[656],{1402:(e,n,r)=>{r.r(n),r.d(n,{assets:()=>o,contentTitle:()=>d,default:()=>p,frontMatter:()=>s,metadata:()=>t,toc:()=>c});const t=JSON.parse('{"id":"Examples","title":"Examples","description":"Examples","source":"@site/i18n/en/docusaurus-plugin-content-docs/current/05-Examples.md","sourceDirName":".","slug":"/Examples","permalink":"/wecasino-www/en/Examples","draft":false,"unlisted":false,"tags":[],"version":"current","sidebarPosition":5,"frontMatter":{},"sidebar":"defaultSidebar","previous":{"title":"Endpoint","permalink":"/wecasino-www/en/Endpoint"},"next":{"title":"Version","permalink":"/wecasino-www/en/"}}');var i=r(3420),a=r(5404);const s={},d="Push and Parse Examples",o={},c=[{value:"Examples",id:"examples",level:2},{value:"golang amqp091 Package Parsing Example",id:"golang-amqp091-package-parsing-example",level:3},{value:"Game Event Notification Description",id:"game-event-notification-description",level:3},{value:"BA Card Face Parsing (SAMPLE)",id:"ba-card-face-parsing-sample",level:3},{value:"BA Fortune Number Description",id:"ba-fortune-number-description",level:3}];function l(e){const n={a:"a",code:"code",h1:"h1",h2:"h2",h3:"h3",header:"header",li:"li",ol:"ol",p:"p",pre:"pre",table:"table",tbody:"tbody",td:"td",th:"th",thead:"thead",tr:"tr",...(0,a.R)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(n.header,{children:(0,i.jsx)(n.h1,{id:"push-and-parse-examples",children:"Push and Parse Examples"})}),"\n",(0,i.jsx)(n.h2,{id:"examples",children:"Examples"}),"\n",(0,i.jsx)(n.h3,{id:"golang-amqp091-package-parsing-example",children:"golang amqp091 Package Parsing Example"}),"\n",(0,i.jsxs)(n.p,{children:["Complete example ",(0,i.jsx)(n.a,{href:"https://github.com/wecasino/wecasino-demo-backend-go/blob/main/queue/queue.go#L122",children:"Github"})]}),"\n",(0,i.jsxs)(n.ol,{children:["\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsx)(n.p,{children:"Get the corresponding notification type based on amqp delivery.Type, and use proto to parse body format according to the type"}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsx)(n.p,{children:"The parsing method for game round cards (results) is supplemented in each game chapter"}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsx)(n.p,{children:"Code reference:"}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.a,{href:"https://github.com/wecasino/wecasino-demo-backend-go",children:"Github"})," (GOLANG)"]}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.a,{href:"https://github.com/wecasino/wecasino-demo-java",children:"Github"})," (JAVA)"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-go",children:'func(delivery amqp091.Delivery) {\n  notifyType := pbRecorder.GameNotifyType(pbRecorder.GameNotifyType_value[delivery.Type])\n\n\n      logrus.Infof("receive game notifyType:[%v]", notifyType)\n      switch notifyType {\n      case pbRecorder.GameNotifyType_NOTIFY_GAME_DEALER_LOGIN,\n          pbRecorder.GameNotifyType_NOTIFY_GAME_DEALER_LOGOUT,\n          pbRecorder.GameNotifyType_NOTIFY_GAME_CHANGING_SHOE:\n          gameProvide := &pbRecorder.GameProvide{}\n          err := proto.Unmarshal(delivery.Body, gameProvide)\n          \u2026\n      case pbRecorder.GameNotifyType_NOTIFY_SHIFT_START,\n          pbRecorder.GameNotifyType_NOTIFY_SHIFT_END:\n          shift := &pbRecorder.ShiftRecord{}\n          err := proto.Unmarshal(delivery.Body, shift)\n          \u2026\n      case pbRecorder.GameNotifyType_NOTIFY_SHOE_START,\n          pbRecorder.GameNotifyType_NOTIFY_SHOE_END:\n          shoe := &pbRecorder.ShoeRecord{}\n          err := proto.Unmarshal(delivery.Body, shoe)\n          \u2026\n      case pbRecorder.GameNotifyType_NOTIFY_ROUND_START,\n          pbRecorder.GameNotifyType_NOTIFY_ROUND_BET,\n          pbRecorder.GameNotifyType_NOTIFY_ROUND_NO_MORE_BET,\n          pbRecorder.GameNotifyType_NOTIFY_ROUND_STEP,\n          pbRecorder.GameNotifyType_NOTIFY_ROUND_FINISH,\n          pbRecorder.GameNotifyType_NOTIFY_ROUND_CANCEL,\n          pbRecorder.GameNotifyType_NOTIFY_ROUND_PLAYBACK:\n          round := &pbRecorder.RoundRecord{}\n          err := proto.Unmarshal(delivery.Body, round)\n\n          ...\n\n'})}),"\n"]}),"\n"]}),"\n",(0,i.jsx)(n.h3,{id:"game-event-notification-description",children:"Game Event Notification Description"}),"\n",(0,i.jsxs)(n.ol,{children:["\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsx)(n.p,{children:"Table event notification (provider parsing)"}),"\n",(0,i.jsxs)(n.table,{children:[(0,i.jsx)(n.thead,{children:(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.th,{children:"GameNotifyType"}),(0,i.jsx)(n.th,{children:"Description"})]})}),(0,i.jsxs)(n.tbody,{children:[(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:"GameNotifyType_NOTIFY_GAME_PROVIDE_STATE_CHANGE"}),(0,i.jsx)(n.td,{children:"Table status change"})]}),(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:"GameNotifyType_NOTIFY_GAME_DEALER_LOGIN"}),(0,i.jsx)(n.td,{children:"Dealer login code name related"})]}),(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:"GameNotifyType_NOTIFY_GAME_DEALER_LOGOUT"}),(0,i.jsx)(n.td,{children:"Dealer logout code name related"})]}),(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:"GameNotifyType_NOTIFY_GAME_CHANGING_SHOE"}),(0,i.jsx)(n.td,{children:"Change shoe"})]}),(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:"GameNotifyType_NOTIFY_GAME_CAPTURE"}),(0,i.jsx)(n.td,{children:"Dealer photo thumbnail screen"})]})]})]}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsx)(n.p,{children:"Table shift event notification (ShiftRecord parsing)"}),"\n",(0,i.jsxs)(n.table,{children:[(0,i.jsx)(n.thead,{children:(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.th,{children:"GameNotifyType"}),(0,i.jsx)(n.th,{children:"Description"})]})}),(0,i.jsxs)(n.tbody,{children:[(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:"GameNotifyType_NOTIFY_SHIFT_START"}),(0,i.jsx)(n.td,{children:"Shift start"})]}),(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:"GameNotifyType_NOTIFY_SHIFT_END"}),(0,i.jsx)(n.td,{children:"Shift end"})]})]})]}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsx)(n.p,{children:"Table shoe event notification (ShoeRecord parsing)"}),"\n",(0,i.jsxs)(n.table,{children:[(0,i.jsx)(n.thead,{children:(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.th,{children:"GameNotifyType"}),(0,i.jsx)(n.th,{children:"Description"})]})}),(0,i.jsxs)(n.tbody,{children:[(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:"GameNotifyType_NOTIFY_SHOE_START"}),(0,i.jsx)(n.td,{children:"Shoe number start"})]}),(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:"GameNotifyType_NOTIFY_SHOE_END"}),(0,i.jsx)(n.td,{children:"Shoe number end"})]})]})]}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsx)(n.p,{children:"Round related (RoundRecord parsing)"}),"\n",(0,i.jsxs)(n.table,{children:[(0,i.jsx)(n.thead,{children:(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.th,{children:"GameNotifyType"}),(0,i.jsx)(n.th,{children:"Description"})]})}),(0,i.jsxs)(n.tbody,{children:[(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:"GameNotifyType_NOTIFY_ROUND_START"}),(0,i.jsx)(n.td,{children:"Notify game start (can be used as betting start, can be ignored)"})]}),(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:"GameNotifyType_NOTIFY_ROUND_BET"}),(0,i.jsx)(n.td,{children:"Notify game betting start"})]}),(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:"GameNotifyType_NOTIFY_ROUND_NO_MORE_BET"}),(0,i.jsx)(n.td,{children:"Notify game stop betting"})]}),(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:"GameNotifyType_NOTIFY_ROUND_STEP"}),(0,i.jsx)(n.td,{children:"Notify game round history"})]}),(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:"GameNotifyType_NOTIFY_ROUND_FINISH"}),(0,i.jsx)(n.td,{children:"Notify game round result"})]}),(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:"GameNotifyType_NOTIFY_ROUND_CANCEL"}),(0,i.jsx)(n.td,{children:"Notify game round cancellation"})]}),(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:"GameNotifyType_NOTIFY_ROUND_PLAYBACK"}),(0,i.jsx)(n.td,{children:"Notify game round replay video URL"})]}),(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:"GameNotifyType_NOTIFY_ROUND_CANCEL_AFTER_ROUND"}),(0,i.jsx)(n.td,{children:"Post-round cancellation result"})]}),(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:"GameNotifyType_NOTIFY_ROUND_MODIFY_AFTER_ROUND"}),(0,i.jsx)(n.td,{children:"Post-round card face modification result"})]}),(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:"GameNotifyType_NOTIFY_ROUND_FINISH_AFTER_ROUND"}),(0,i.jsx)(n.td,{children:"Result input through backend"})]})]})]}),"\n"]}),"\n"]}),"\n",(0,i.jsx)(n.h3,{id:"ba-card-face-parsing-sample",children:"BA Card Face Parsing (SAMPLE)"}),"\n",(0,i.jsxs)(n.ol,{children:["\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsx)(n.p,{children:"Parse roundRecord according to GameNotifyType_NOTIFY_ROUND_STEP event\nto get which card types are currently on the field, refer to seat and resource usage"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-go",children:'import (\npbBaccarat "github.com/wecasino/wecasino-proto/pbgo/games/baccarat"\npbRecorder "github.com/wecasino/wecasino-proto/pbgo/recorder"\n)\n\nfunc ParseRoundCardsIndex(ctx context.Context, round *pbRecorder.RoundRecord) (b1, b2, b3, p1, p2, p3 string) {\n    banker := round.Seats[int32(pbGames.FlowSeat_BANKER)]\n    bankerNormal := banker.GetCards()[int32(pbBaccarat.ResourceType_NORMAL)].GetList()\n    if len(bankerNormal) > 0 {\n        b1 = bankerNormal[0].GetCode()\n    }\n    if len(bankerNormal) > 1 {\n        b2 = bankerNormal[1].GetCode()\n    }\n    bankerExtra := banker.GetCards()[int32(pbBaccarat.ResourceType_EXTRA)].GetList()\n    if len(bankerExtra) > 0 {\n        b3 = bankerExtra[0].GetCode()\n    }\n\n\n    player := round.Seats[int32(pbGames.FlowSeat_PLAYER)]\n    playerNormal := player.GetCards()[int32(pbBaccarat.ResourceType_NORMAL)].GetList()\n    if len(playerNormal) > 0 {\n        p1 = playerNormal[0].GetCode()\n    }\n    if len(playerNormal) > 1 {\n        p2 = playerNormal[1].GetCode()\n    }\n    playerExtra := player.GetCards()[int32(pbBaccarat.ResourceType_EXTRA)].GetList()\n    if len(playerExtra) > 0 {\n        p3 = playerExtra[0].GetCode()\n    }\n    return\n    }\n\n'})}),"\n"]}),"\n"]}),"\n",(0,i.jsx)(n.h3,{id:"ba-fortune-number-description",children:"BA Fortune Number Description"}),"\n",(0,i.jsxs)(n.ol,{children:["\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsx)(n.p,{children:"The FortuneRate in roundRecord attributes shows the card corresponding multiplier, announced at stop betting, if there is a corresponding fortune card on the field, the odds are adjusted according to game rules"}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsx)(n.p,{children:'map["CLUB_J":2 "DIAMOND_8":8 "HEART_3":3 "HEART_Q":2]'}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-go",children:"func ParseRoundLucky(ctx context.Context, round *pbRecorder.RoundRecord) map[uint8]uint16 {\nroundLuckyMap := map[uint8]uint16{}\nfor cardCode, rate := range round.FortuneRates {\n    poker, err := cards.ParsePokerCode(cardCode)\n    if err == nil {\n        roundLuckyMap[poker] = uint16(rate)\n    }\n}\nreturn roundLuckyMap\n}\n"})}),"\n"]}),"\n"]})]})}function p(e={}){const{wrapper:n}={...(0,a.R)(),...e.components};return n?(0,i.jsx)(n,{...e,children:(0,i.jsx)(l,{...e})}):l(e)}},5404:(e,n,r)=>{r.d(n,{R:()=>s,x:()=>d});var t=r(6672);const i={},a=t.createContext(i);function s(e){const n=t.useContext(a);return t.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function d(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:s(e.components),t.createElement(a.Provider,{value:n},e.children)}}}]);